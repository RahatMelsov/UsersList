{"version":3,"sources":["components/modal.jsx","components/table.jsx","components/listModal.jsx","App.js","reportWebVitals.js","state.js","index.js"],"names":["ModalExampleCloseIcon","props","useState","open","setOpen","user","mine","setMine","Date","startDate","setStartDate","Modal","closeIcon","trigger","Button","icon","Icon","name","onClose","onOpen","Header","content","Content","Form","Field","id","value","named","onChange","event","prevMine","target","lastName","city","cowntry","Group","widths","moment","DateOfBirth","format","selected","date","Actions","color","onClick","setUsers","prevState","map","obj","Object","assign","TableList","Table","Body","users","u","Row","Cell","Users","ListModal","id_con","window","lin","companys","contactDate","contractNumber","List","Item","Checkbox","indexOf","label","e","currentTarget","childNodes","checked","console","log","setContract","App","contract","contracts","User","userrs","celled","striped","HeaderCell","Grid","columns","Column","Segment","dateContract","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ADD_USERS_DATA","initialState","state","redusers","combineReducers","UsersPage","action","type","main","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8d6358aa.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { Button, Header, Icon, Modal, Form, Input } from 'semantic-ui-react'\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport moment from 'moment';\r\n\r\nfunction ModalExampleCloseIcon(props) {\r\n    const [open, setOpen] = useState(false)\r\n    const [mine, setMine] = useState({ ...props.user })\r\n    const [startDate, setStartDate] = useState(new Date());\r\n\r\n\r\n    return (\r\n        <Modal\r\n            closeIcon\r\n            open={open}\r\n            trigger={<Button icon>\r\n                <Icon name='pencil alternate' />\r\n            </Button>}\r\n            onClose={() => setOpen(false)}\r\n            onOpen={() => setOpen(true)}\r\n        >\r\n            <Header icon='archive' content='Archive Old Messages' />\r\n            <Modal.Content>\r\n                <Form>\r\n                    <Form.Field>\r\n                        <label>First Name</label>\r\n                        <input id=\"name\" value={mine.named}\r\n                            onChange={event => setMine(prevMine => { return { ...prevMine, named: event.target.value } })} />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label>Last Name</label>\r\n                        <input id=\"lastName\" value={mine.lastName} onChange={event => setMine(prevMine => { return { ...prevMine, lastName: event.target.value } })} />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label>City</label>\r\n                        <input id=\"city\" value={mine.city} onChange={event => setMine(prevMine => { return { ...prevMine, city: event.target.value } })} />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label>Cowntry</label>\r\n                        <input id=\"cowntry\" value={mine.cowntry} onChange={event => setMine(prevMine => { return { ...prevMine, cowntry: event.target.value } })} />\r\n                    </Form.Field>\r\n                    <Form.Group widths='equal'>\r\n                        <Form.Field>\r\n                            <label>Birth day</label>\r\n                            <DatePicker value={moment(mine.DateOfBirth).format('L')}\r\n                                selected={startDate}\r\n                                onChange={(date) => {\r\n                                    setStartDate(date)\r\n                                    return setMine(prevMine => { return { ...prevMine, DateOfBirth: startDate } })\r\n                                }} />\r\n                        </Form.Field>\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button color='red' onClick={() => setOpen(false)}>\r\n                    <Icon name='remove' /> No\r\n        </Button>\r\n                <Button color='green' onClick={() => {\r\n                    props.setUsers(prevState => {\r\n                        return (prevState.map(\r\n                            obj => (obj.id === props.user.id ? Object.assign(obj, mine) : obj)\r\n                        ))\r\n                    });\r\n                    setOpen(false)\r\n                }}>\r\n                    <Icon name='checkmark' /> Yes\r\n        </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ModalExampleCloseIcon;","import React from 'react'\r\nimport ModalExampleCloseIcon from './modal'\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport { Table } from 'semantic-ui-react'\r\nimport moment from 'moment';\r\nimport { List } from 'semantic-ui-react'\r\n\r\nconst TableList = (props) => {\r\n  return (\r\n    <Table.Body>\r\n      { props.users.map((u) => {\r\n        return (\r\n          <Table.Row>\r\n            <Table.Cell>{u.named}</Table.Cell>\r\n            <Table.Cell>{u.lastName}</Table.Cell>\r\n            <Table.Cell>{moment(u.DateOfBirth).format('L')}</Table.Cell>\r\n            <Table.Cell>{u.city} from {u.cowntry}</Table.Cell>\r\n            <Table.Cell><ModalExampleCloseIcon Users={props.users} user={u} setUsers={props.setUsers} />\r\n            </Table.Cell>\r\n          </Table.Row>\r\n        )\r\n      })}\r\n    </Table.Body>\r\n  )\r\n}\r\n\r\nexport default TableList;","import React, { useState } from 'react'\r\nimport { Button, Header, Icon, Modal, Checkbox, List } from 'semantic-ui-react'\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport moment from 'moment';\r\n\r\nfunction ListModal(props) {\r\n\r\n    window.lin = 'ddads'\r\n    let id_con;\r\n    const [open, setOpen] = useState(false)\r\n    const [mine, setMine] = useState()\r\n    const companys = [\r\n        { name: \"Wal-Mart Stores\", contactDate: '12/12/12', contractNumber: 1234 },\r\n        { name: \"Exxon Mobil\", contactDate: '12/12/10', contractNumber: 43242 },\r\n        { name: \"Chevron\", contactDate: '12/12/12', contractNumber: 324243 },\r\n        { name: \"Berkshire Hathaway\", contactDate: '12/12/12', contractNumber: 12413432443 },\r\n        { name: \"Apple\", contactDate: '12/12/12', contractNumber: 12434241343 },\r\n        { name: \"Phillips 66\", contactDate: '12/12/12', contractNumber: 124341343 },\r\n    ]\r\n\r\n    const few = (e, name_contract) => {\r\n        if(window.lin == 'ddads') {\r\n            window.lin = e.childNodes[0]\r\n            e.childNodes[0].checked = true;\r\n            id_con = e.childNodes[0].id \r\n        } else {\r\n            window.lin.checked = false;\r\n            e.childNodes[0].checked = true;\r\n            window.lin = e.childNodes[0];\r\n            id_con = e.childNodes[0].id\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            closeIcon\r\n            open={open}\r\n            trigger={<Button icon>\r\n                <h3>ok</h3>\r\n            </Button>}\r\n            onClose={() => setOpen(false)}\r\n            onOpen={() => setOpen(true)}\r\n        >\r\n            <Header />\r\n            <Modal.Content>\r\n                <List>\r\n                    {companys.map((u) => <List.Item><List.Content><h4><Checkbox id={'' + companys.indexOf(u) + ''} label={u.name + \" | \" + moment(u.contactDate).format('L') + \" | \" + u.contractNumber} name='contract' onClick={(event) => few(event.currentTarget, 'contract')}/></h4></List.Content> </List.Item>)}\r\n                </List>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button color='red' onClick={() => setOpen(false)}>\r\n                    <Icon name='remove' /> No\r\n        </Button>\r\n                <Button color='green' onClick={() => {\r\n                    setOpen(false)\r\n                    console.log(id_con)\r\n                    console.log(companys[id_con])\r\n                    debugger;\r\n                    props.setContract(companys[id_con])\r\n                }}>\r\n                    <Icon name='checkmark' /> Yes\r\n        </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ListModal;","import './App.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport React, { useState } from 'react'\nimport { Table, Grid, Segment } from 'semantic-ui-react'\nimport TableList from './components/table'\nimport ListModal from './components/listModal'\nimport moment from 'moment';\n\nfunction App() {\n  debugger;\n  const contract = {\n    name: \"Wal-Mart Stores\", \n    contactDate: '12/12/12', \n    contractNumber: 1241343\n  }\n  window.contract = contract;\n  const Users = [\n    {\n      named: \"Oliver \",\n      lastName: 'Manson',\n      DateOfBirth: new Date('1995-12-17'),\n      city: 'Liverpool',\n      cowntry: 'GreatBrit',\n      id: 0,\n    },\n    {\n      named: \"Harry \",\n      lastName: 'Jackson',\n      DateOfBirth: new Date('1995-12-17'),\n      city: 'Almaty',\n      cowntry: 'Kazakhstan',\n      id: 1,\n    },\n    {\n      named: \"Jacob \",\n      lastName: 'Grayson',\n      DateOfBirth: new Date('1995-12-17'),\n      city: 'Almaty',\n      cowntry: 'Kazakhstan',\n      id: 2,\n    }\n  ]\n\n  const [users, setUsers] = useState(Users)\n  const [contracts, setContract] = useState(contract)\n\n  window.User = Users\n  window.userrs = users;\n\n  return (\n    <div>\n      <Table celled striped>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>First name</Table.HeaderCell>\n          <Table.HeaderCell>Last name</Table.HeaderCell>\n          <Table.HeaderCell>Birth day</Table.HeaderCell>\n          <Table.HeaderCell>Location</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <TableList users={users} setUsers={setUsers} />\n    </Table>\n    <Grid columns='equal'>\n    <Grid.Row>\n      <Grid.Column>\n        <Segment>{contracts.name}</Segment>\n      </Grid.Column>\n      <Grid.Column>\n        <Segment>{contracts.contractNumber}</Segment>\n      </Grid.Column>\n      <Grid.Column>\n        <Segment>{moment(contracts.dateContract).format('L')}</Segment>\n      </Grid.Column>\n      <Grid.Column>\n        <ListModal contracts = {contracts} setContract={setContract}/>\n      </Grid.Column>\n    </Grid.Row>\n    </Grid>\n    </div>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers, createStore } from 'redux';\r\n\r\n// Фамилия, Имя, дата рождения, Расположение\r\nconst ADD_USERS_DATA = 'ADD_USERS_DATA';\r\n\r\nlet initialState = {\r\n    Users: [\r\n        {\r\n            named: \"Oliver \",\r\n            lastName: 'Manson',\r\n            DateOfBirth: new Date('1995-12-17'),\r\n                city: 'Liverpool',\r\n                cowntry: 'GreatBrit',\r\n            id: 0,\r\n        },\r\n        {\r\n            named: \"Harry \",\r\n            lastName: 'Jackson',\r\n            DateOfBirth: new Date('1995-12-17'),\r\n                city: 'Almaty',\r\n                cowntry: 'Kazakhstan',\r\n            id: 1,\r\n        },\r\n        {\r\n            named: \"Jacob \",\r\n            lastName: 'Grayson',\r\n            DateOfBirth: new Date('1995-12-17'),\r\n                city: 'Almaty',\r\n                cowntry: 'Kazakhstan',\r\n            id: 2,\r\n        }\r\n    ]\r\n}\r\n\r\nwindow.state = initialState;\r\n\r\nlet UsersData = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case ADD_USERS_DATA: {\r\n            return {\r\n                ...action.main\r\n            }\r\n            break;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nlet redusers = combineReducers({\r\n    UsersPage: UsersData,\r\n})\r\n\r\nlet store = createStore(redusers);\r\n\r\nexport const addusersDataAC = (main) => ({\r\n    type: ADD_USERS_DATA,\r\n    main,\r\n});\r\n\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Users from './state'\nimport store from './state'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}